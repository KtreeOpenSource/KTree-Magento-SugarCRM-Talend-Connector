// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package magentosugarcrm.magento2sugarcrmsync_0_1;

import routines.WeatherSoap_BindingStub;
import routines.GenericTicketConnector;
import routines.DataOperation;
import routines.GenericTicketConnectorLocator;
import routines.GetRandomPhoneNum;
import routines.Mage_Api_Model_Server_HandlerBindingStub;
import routines.MagentoService;
import routines.OTRS_TicketGet;
import routines.GenericTicketConnector_Interface;
import routines.MagentoServiceLocator;
import routines.OTRS_TicketGetResponse_Ticket;
import routines.GenericTicketConnector_ServiceStub;
import routines.OTRS_SessionCreate;
import routines.TalendDate;
import routines.DemoRoutines;
import routines.OTRS_TicketCreateResponse;
import routines.OTRS_Article;
import routines.OTRS_Error;
import routines.OTRS_DynamicField;
import routines.WeatherSoap_PortType;
import routines.OTRS_TicketUpdate;
import routines.OTRS_TicketCreate_Ticket;
import routines.OTRS_SessionCreateResponse;
import routines.TalendString;
import routines.OTRS_PendingTime;
import routines.Weather;
import routines.OTRS_TicketUpdate_Ticket;
import routines.TalendDataGenerator;
import routines.OTRS_TicketGet_Attachment;
import routines.Numeric;
import routines.OTRS_TicketSearch;
import routines.OTRS_TicketSearch_TicketFlag;
import routines.OTRS_TicketUpdateResponse;
import routines.Mathematical;
import routines.OTRS_Attachment;
import routines.OTRS_TicketGetResponse_Article;
import routines.Relational;
import routines.Mage_Api_Model_Server_HandlerPortType;
import routines.WeatherLocator;
import routines.OTRS_TicketSeach_DynamicField;
import routines.OTRS_TicketCreate;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
import java.util.ArrayList;
import java.util.HashMap;
import java.io.File;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_9
import java.net.HttpURLConnection;
import java.net.URL;

//the import part of tJavaRow_1
import java.util.ArrayList;

//the import part of tJava_3
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_13
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Magento2SugarCRMSync Purpose: <br>
 * Description: Syncing magento customers to Sugarcrm contacts using web service <br>
 * @author user@talend.com
 * @version 6.1.0.20151029_1337
 * @status 
 */
public class Magento2SugarCRMSync implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (MagentoIDList != null) {

				this.setProperty("MagentoIDList", MagentoIDList.toString());

			}

			if (magento_sessionId != null) {

				this.setProperty("magento_sessionId",
						magento_sessionId.toString());

			}

			if (CustomerLength != null) {

				this.setProperty("CustomerLength", CustomerLength.toString());

			}

			if (indexval != null) {

				this.setProperty("indexval", indexval.toString());

			}

			if (cus_id != null) {

				this.setProperty("cus_id", cus_id.toString());

			}

			if (create_at != null) {

				String pattern_create_at = "yyyy-MM-dd HH:mm:ss";
				String value_create_at = "";
				String[] parts_create_at = value_create_at.split(";");
				if (parts_create_at.length > 1) {
					pattern_create_at = parts_create_at[0];
					this.setProperty(
							"create_at",
							pattern_create_at
									+ ";"
									+ FormatterUtils.format_Date(create_at,
											pattern_create_at));
				} else {
					this.setProperty("create_at", FormatterUtils.format_Date(
							create_at, pattern_create_at));
				}

			}

			if (update_at != null) {

				String pattern_update_at = "yyyy-MM-dd HH:mm:ss";
				String value_update_at = "";
				String[] parts_update_at = value_update_at.split(";");
				if (parts_update_at.length > 1) {
					pattern_update_at = parts_update_at[0];
					this.setProperty(
							"update_at",
							pattern_update_at
									+ ";"
									+ FormatterUtils.format_Date(update_at,
											pattern_update_at));
				} else {
					this.setProperty("update_at", FormatterUtils.format_Date(
							update_at, pattern_update_at));
				}

			}

			if (email != null) {

				this.setProperty("email", email.toString());

			}

			if (firstname != null) {

				this.setProperty("firstname", firstname.toString());

			}

			if (lname != null) {

				this.setProperty("lname", lname.toString());

			}

			if (city != null) {

				this.setProperty("city", city.toString());

			}

			if (telephone != null) {

				this.setProperty("telephone", telephone.toString());

			}

			if (street != null) {

				this.setProperty("street", street.toString());

			}

			if (postcode != null) {

				this.setProperty("postcode", postcode.toString());

			}

			if (salutation != null) {

				this.setProperty("salutation", salutation.toString());

			}

			if (MagentoURL != null) {

				this.setProperty("MagentoURL", MagentoURL.toString());

			}

			if (MagentoAPIUser != null) {

				this.setProperty("MagentoAPIUser", MagentoAPIUser.toString());

			}

			if (MagentoAPIPassword != null) {

				this.setProperty("MagentoAPIPassword",
						MagentoAPIPassword.toString());

			}

			if (SugarCRMURL != null) {

				this.setProperty("SugarCRMURL", SugarCRMURL.toString());

			}

			if (MagentoConnectionTimeOut != null) {

				this.setProperty("MagentoConnectionTimeOut",
						MagentoConnectionTimeOut.toString());

			}

			if (SugarCRMUser != null) {

				this.setProperty("SugarCRMUser", SugarCRMUser.toString());

			}

			if (SugarCRMPassword != null) {

				this.setProperty("SugarCRMPassword",
						SugarCRMPassword.toString());

			}

			if (PropertyFilePath != null) {

				this.setProperty("PropertyFilePath",
						PropertyFilePath.toString());

			}

			if (ValidateVariables != null) {

				this.setProperty("ValidateVariables",
						ValidateVariables.toString());

			}

			if (MagentoReadTimeout != null) {

				this.setProperty("MagentoReadTimeout",
						MagentoReadTimeout.toString());

			}

			if (MagentoConnectionCode != null) {

				this.setProperty("MagentoConnectionCode",
						MagentoConnectionCode.toString());

			}

			if (CRMRecordsCount != null) {

				this.setProperty("CRMRecordsCount", CRMRecordsCount.toString());

			}

			if (SugarCRMID != null) {

				this.setProperty("SugarCRMID", SugarCRMID.toString());

			}

			if (CustomerAddressHashMap != null) {

				this.setProperty("CustomerAddressHashMap",
						CustomerAddressHashMap.toString());

			}

			if (SugarCRMCustomerID != null) {

				this.setProperty("SugarCRMCustomerID",
						SugarCRMCustomerID.toString());

			}

			if (CustomerCount != null) {

				this.setProperty("CustomerCount", CustomerCount.toString());

			}

			if (MasterIDSList != null) {

				this.setProperty("MasterIDSList", MasterIDSList.toString());

			}

			if (MasterListSize != null) {

				this.setProperty("MasterListSize", MasterListSize.toString());

			}

			if (MasterSubIDList != null) {

				this.setProperty("MasterSubIDList", MasterSubIDList.toString());

			}

			if (MagentoCustomerCount != null) {

				this.setProperty("MagentoCustomerCount",
						MagentoCustomerCount.toString());

			}

			if (EmailBody != null) {

				this.setProperty("EmailBody", EmailBody.toString());

			}

			if (emailSmtpPort != null) {

				this.setProperty("emailSmtpPort", emailSmtpPort.toString());

			}

			if (emailSmtpHost != null) {

				this.setProperty("emailSmtpHost", emailSmtpHost.toString());

			}

			if (emailSmtpUsername != null) {

				this.setProperty("emailSmtpUsername",
						emailSmtpUsername.toString());

			}

			if (emailSmtpPassword != null) {

				this.setProperty("emailSmtpPassword",
						emailSmtpPassword.toString());

			}

			if (setTo != null) {

				this.setProperty("setTo", setTo.toString());

			}

			if (setCc != null) {

				this.setProperty("setCc", setCc.toString());

			}

			if (setBcc != null) {

				this.setProperty("setBcc", setBcc.toString());

			}

			if (setSubject != null) {

				this.setProperty("setSubject", setSubject.toString());

			}

			if (SMTPTest != null) {

				this.setProperty("SMTPTest", SMTPTest.toString());

			}

			if (setFrom != null) {

				this.setProperty("setFrom", setFrom.toString());

			}

			if (ErrorCode != null) {

				this.setProperty("ErrorCode", ErrorCode.toString());

			}

			if (SyncCustomersCount != null) {

				this.setProperty("SyncCustomersCount",
						SyncCustomersCount.toString());

			}

			if (SugarCRMIDCount != null) {

				this.setProperty("SugarCRMIDCount", SugarCRMIDCount.toString());

			}

		}

		public Object MagentoIDList;

		public Object getMagentoIDList() {
			return this.MagentoIDList;
		}

		public String magento_sessionId;

		public String getMagento_sessionId() {
			return this.magento_sessionId;
		}

		public Integer CustomerLength;

		public Integer getCustomerLength() {
			return this.CustomerLength;
		}

		public Object indexval;

		public Object getIndexval() {
			return this.indexval;
		}

		public String cus_id;

		public String getCus_id() {
			return this.cus_id;
		}

		public java.util.Date create_at;

		public java.util.Date getCreate_at() {
			return this.create_at;
		}

		public java.util.Date update_at;

		public java.util.Date getUpdate_at() {
			return this.update_at;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String firstname;

		public String getFirstname() {
			return this.firstname;
		}

		public String lname;

		public String getLname() {
			return this.lname;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String telephone;

		public String getTelephone() {
			return this.telephone;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String postcode;

		public String getPostcode() {
			return this.postcode;
		}

		public String salutation;

		public String getSalutation() {
			return this.salutation;
		}

		public String MagentoURL;

		public String getMagentoURL() {
			return this.MagentoURL;
		}

		public String MagentoAPIUser;

		public String getMagentoAPIUser() {
			return this.MagentoAPIUser;
		}

		public String MagentoAPIPassword;

		public String getMagentoAPIPassword() {
			return this.MagentoAPIPassword;
		}

		public String SugarCRMURL;

		public String getSugarCRMURL() {
			return this.SugarCRMURL;
		}

		public Integer MagentoConnectionTimeOut;

		public Integer getMagentoConnectionTimeOut() {
			return this.MagentoConnectionTimeOut;
		}

		public String SugarCRMUser;

		public String getSugarCRMUser() {
			return this.SugarCRMUser;
		}

		public String SugarCRMPassword;

		public String getSugarCRMPassword() {
			return this.SugarCRMPassword;
		}

		public String PropertyFilePath;

		public String getPropertyFilePath() {
			return this.PropertyFilePath;
		}

		public Integer ValidateVariables;

		public Integer getValidateVariables() {
			return this.ValidateVariables;
		}

		public Integer MagentoReadTimeout;

		public Integer getMagentoReadTimeout() {
			return this.MagentoReadTimeout;
		}

		public Integer MagentoConnectionCode;

		public Integer getMagentoConnectionCode() {
			return this.MagentoConnectionCode;
		}

		public Integer CRMRecordsCount;

		public Integer getCRMRecordsCount() {
			return this.CRMRecordsCount;
		}

		public String SugarCRMID;

		public String getSugarCRMID() {
			return this.SugarCRMID;
		}

		public Object CustomerAddressHashMap;

		public Object getCustomerAddressHashMap() {
			return this.CustomerAddressHashMap;
		}

		public String SugarCRMCustomerID;

		public String getSugarCRMCustomerID() {
			return this.SugarCRMCustomerID;
		}

		public Integer CustomerCount;

		public Integer getCustomerCount() {
			return this.CustomerCount;
		}

		public Object MasterIDSList;

		public Object getMasterIDSList() {
			return this.MasterIDSList;
		}

		public Integer MasterListSize;

		public Integer getMasterListSize() {
			return this.MasterListSize;
		}

		public Object MasterSubIDList;

		public Object getMasterSubIDList() {
			return this.MasterSubIDList;
		}

		public Integer MagentoCustomerCount;

		public Integer getMagentoCustomerCount() {
			return this.MagentoCustomerCount;
		}

		public String EmailBody;

		public String getEmailBody() {
			return this.EmailBody;
		}

		public String emailSmtpPort;

		public String getEmailSmtpPort() {
			return this.emailSmtpPort;
		}

		public String emailSmtpHost;

		public String getEmailSmtpHost() {
			return this.emailSmtpHost;
		}

		public String emailSmtpUsername;

		public String getEmailSmtpUsername() {
			return this.emailSmtpUsername;
		}

		public String emailSmtpPassword;

		public String getEmailSmtpPassword() {
			return this.emailSmtpPassword;
		}

		public String setTo;

		public String getSetTo() {
			return this.setTo;
		}

		public String setCc;

		public String getSetCc() {
			return this.setCc;
		}

		public String setBcc;

		public String getSetBcc() {
			return this.setBcc;
		}

		public String setSubject;

		public String getSetSubject() {
			return this.setSubject;
		}

		public Integer SMTPTest;

		public Integer getSMTPTest() {
			return this.SMTPTest;
		}

		public String setFrom;

		public String getSetFrom() {
			return this.setFrom;
		}

		public Integer ErrorCode;

		public Integer getErrorCode() {
			return this.ErrorCode;
		}

		public Integer SyncCustomersCount;

		public Integer getSyncCustomersCount() {
			return this.SyncCustomersCount;
		}

		public Integer SugarCRMIDCount;

		public Integer getSugarCRMIDCount() {
			return this.SugarCRMIDCount;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Magento2SugarCRMSync";
	private final String projectName = "MAGENTOSUGARCRM";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Magento2SugarCRMSync.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Magento2SugarCRMSync.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileExist_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileExist_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputProperties_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputProperties_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSendMail_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWebServiceInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWebServiceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWebServiceInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLoop_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWebServiceInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLoop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSugarCRMInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSugarCRMOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileExist_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputProperties_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWebServiceInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLoop_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLoop_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tJava_2Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				ArrayList<String> MagentoIDSList = new ArrayList<String>();
				context.MagentoIDList = MagentoIDSList;

				ArrayList<Object> MasterIDList = new ArrayList<Object>();
				context.MasterIDSList = MasterIDList; // Main list for adding
														// Ids sublist .

				ArrayList<Object> masterSubIDList = new ArrayList<Object>();
				context.MasterSubIDList = masterSubIDList; // Sublist .

				HashMap<Object, Object> CustomerAddress = new HashMap<Object, Object>();
				context.CustomerAddressHashMap = CustomerAddress; // global hash
																	// map with
																	// current
																	// ids
																	// customer
																	// address
																	// details.

				// property file name
				System.out.println("Property File Location :"
						+ context.PropertyFilePath);

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tFileExist_1Process(globalMap);

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tFileExist_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileExist_1 begin ] start
				 */

				ok_Hash.put("tFileExist_1", false);
				start_Hash.put("tFileExist_1", System.currentTimeMillis());

				currentComponent = "tFileExist_1";

				int tos_count_tFileExist_1 = 0;

				/**
				 * [tFileExist_1 begin ] stop
				 */

				/**
				 * [tFileExist_1 main ] start
				 */

				currentComponent = "tFileExist_1";

				java.io.File file_tFileExist_1 = new java.io.File(
						context.PropertyFilePath);
				if (!file_tFileExist_1.exists()) {
					globalMap.put("tFileExist_1_EXISTS", false);
				} else {
					globalMap.put("tFileExist_1_EXISTS", true);
				}

				globalMap
						.put("tFileExist_1_FILENAME", context.PropertyFilePath);

				tos_count_tFileExist_1++;

				/**
				 * [tFileExist_1 main ] stop
				 */

				/**
				 * [tFileExist_1 end ] start
				 */

				currentComponent = "tFileExist_1";

				ok_Hash.put("tFileExist_1", true);
				end_Hash.put("tFileExist_1", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_1_EXISTS")) == true) {

					tFileInputProperties_1Process(globalMap);
				}

				if (((Boolean) globalMap.get("tFileExist_1_EXISTS")) == false) {

					tJava_1Process(globalMap);
				}

				/**
				 * [tFileExist_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileExist_1 finally ] start
				 */

				currentComponent = "tFileExist_1";

				/**
				 * [tFileExist_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileExist_1_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];
		static byte[] commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length) {
					if (length < 1024
							&& commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length == 0) {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[1024];
					} else {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length);
				strReturn = new String(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputProperties_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFileInputProperties_1 begin ] start
				 */

				ok_Hash.put("tFileInputProperties_1", false);
				start_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputProperties_1";

				int tos_count_tFileInputProperties_1 = 0;

				java.io.File file_tFileInputProperties_1 = new java.io.File(
						context.PropertyFilePath);
				int nb_line_tFileInputProperties_1 = 0;
				java.util.Properties properties_tFileInputProperties_1 = new java.util.Properties();
				java.io.FileInputStream fis_tFileInputProperties_1 = new java.io.FileInputStream(
						file_tFileInputProperties_1);
				try {
					properties_tFileInputProperties_1
							.load(fis_tFileInputProperties_1);
					java.util.Enumeration enumeration_tFileInputProperties_1 = properties_tFileInputProperties_1
							.propertyNames();
					while (enumeration_tFileInputProperties_1.hasMoreElements()) {
						nb_line_tFileInputProperties_1++;
						row8.key = (String) enumeration_tFileInputProperties_1
								.nextElement();
						row8.value = (String) properties_tFileInputProperties_1
								.getProperty(row8.key);

						/**
						 * [tFileInputProperties_1 begin ] stop
						 */

						/**
						 * [tFileInputProperties_1 main ] start
						 */

						currentComponent = "tFileInputProperties_1";

						tos_count_tFileInputProperties_1++;

						/**
						 * [tFileInputProperties_1 main ] stop
						 */

						/**
						 * [tContextLoad_1 main ] start
						 */

						currentComponent = "tContextLoad_1";

						// ////////////////////////
						String tmp_key_tContextLoad_1 = null;
						String key_tContextLoad_1 = null;
						if (row8.key != null) {
							tmp_key_tContextLoad_1 = row8.key.trim();
							if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
									.startsWith("!"))) {
								tmp_key_tContextLoad_1 = null;
							} else {
								row8.key = tmp_key_tContextLoad_1;
							}
						}
						if (row8.key != null) {
							key_tContextLoad_1 = row8.key;
						}
						String value_tContextLoad_1 = null;
						if (row8.value != null) {
							value_tContextLoad_1 = row8.value;
						}

						if (tmp_key_tContextLoad_1 != null) {
							try {
								if (key_tContextLoad_1 != null
										&& "MagentoIDList"
												.equals(key_tContextLoad_1)) {
									context.MagentoIDList = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "magento_sessionId"
												.equals(key_tContextLoad_1)) {
									context.magento_sessionId = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "CustomerLength"
												.equals(key_tContextLoad_1)) {

									context.CustomerLength = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "indexval"
												.equals(key_tContextLoad_1)) {
									context.indexval = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "cus_id".equals(key_tContextLoad_1)) {
									context.cus_id = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "create_at"
												.equals(key_tContextLoad_1)) {
									String context_create_at_value = context
											.getProperty("create_at");
									if (context_create_at_value == null)
										context_create_at_value = "";
									int context_create_at_pos = context_create_at_value
											.indexOf(";");
									String context_create_at_pattern = "yyyy-MM-dd HH:mm:ss";
									if (context_create_at_pos > -1) {
										context_create_at_pattern = context_create_at_value
												.substring(0,
														context_create_at_pos);
									}
									context.create_at = (java.util.Date) (new java.text.SimpleDateFormat(
											context_create_at_pattern)
											.parse(value_tContextLoad_1));

								}

								if (key_tContextLoad_1 != null
										&& "update_at"
												.equals(key_tContextLoad_1)) {
									String context_update_at_value = context
											.getProperty("update_at");
									if (context_update_at_value == null)
										context_update_at_value = "";
									int context_update_at_pos = context_update_at_value
											.indexOf(";");
									String context_update_at_pattern = "yyyy-MM-dd HH:mm:ss";
									if (context_update_at_pos > -1) {
										context_update_at_pattern = context_update_at_value
												.substring(0,
														context_update_at_pos);
									}
									context.update_at = (java.util.Date) (new java.text.SimpleDateFormat(
											context_update_at_pattern)
											.parse(value_tContextLoad_1));

								}

								if (key_tContextLoad_1 != null
										&& "email".equals(key_tContextLoad_1)) {
									context.email = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "firstname"
												.equals(key_tContextLoad_1)) {
									context.firstname = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "lname".equals(key_tContextLoad_1)) {
									context.lname = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "city".equals(key_tContextLoad_1)) {
									context.city = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "telephone"
												.equals(key_tContextLoad_1)) {
									context.telephone = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "street".equals(key_tContextLoad_1)) {
									context.street = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "postcode"
												.equals(key_tContextLoad_1)) {
									context.postcode = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "salutation"
												.equals(key_tContextLoad_1)) {
									context.salutation = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "MagentoURL"
												.equals(key_tContextLoad_1)) {
									context.MagentoURL = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "MagentoAPIUser"
												.equals(key_tContextLoad_1)) {
									context.MagentoAPIUser = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "MagentoAPIPassword"
												.equals(key_tContextLoad_1)) {
									context.MagentoAPIPassword = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SugarCRMURL"
												.equals(key_tContextLoad_1)) {
									context.SugarCRMURL = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "MagentoConnectionTimeOut"
												.equals(key_tContextLoad_1)) {

									context.MagentoConnectionTimeOut = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "SugarCRMUser"
												.equals(key_tContextLoad_1)) {
									context.SugarCRMUser = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SugarCRMPassword"
												.equals(key_tContextLoad_1)) {
									context.SugarCRMPassword = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "PropertyFilePath"
												.equals(key_tContextLoad_1)) {
									context.PropertyFilePath = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "ValidateVariables"
												.equals(key_tContextLoad_1)) {

									context.ValidateVariables = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "MagentoReadTimeout"
												.equals(key_tContextLoad_1)) {

									context.MagentoReadTimeout = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "MagentoConnectionCode"
												.equals(key_tContextLoad_1)) {

									context.MagentoConnectionCode = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "CRMRecordsCount"
												.equals(key_tContextLoad_1)) {

									context.CRMRecordsCount = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "SugarCRMID"
												.equals(key_tContextLoad_1)) {
									context.SugarCRMID = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "CustomerAddressHashMap"
												.equals(key_tContextLoad_1)) {
									context.CustomerAddressHashMap = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SugarCRMCustomerID"
												.equals(key_tContextLoad_1)) {
									context.SugarCRMCustomerID = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "CustomerCount"
												.equals(key_tContextLoad_1)) {

									context.CustomerCount = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "MasterIDSList"
												.equals(key_tContextLoad_1)) {
									context.MasterIDSList = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "MasterListSize"
												.equals(key_tContextLoad_1)) {

									context.MasterListSize = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "MasterSubIDList"
												.equals(key_tContextLoad_1)) {
									context.MasterSubIDList = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "MagentoCustomerCount"
												.equals(key_tContextLoad_1)) {

									context.MagentoCustomerCount = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "EmailBody"
												.equals(key_tContextLoad_1)) {
									context.EmailBody = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "emailSmtpPort"
												.equals(key_tContextLoad_1)) {
									context.emailSmtpPort = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "emailSmtpHost"
												.equals(key_tContextLoad_1)) {
									context.emailSmtpHost = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "emailSmtpUsername"
												.equals(key_tContextLoad_1)) {
									context.emailSmtpUsername = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "emailSmtpPassword"
												.equals(key_tContextLoad_1)) {
									context.emailSmtpPassword = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "setTo".equals(key_tContextLoad_1)) {
									context.setTo = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "setCc".equals(key_tContextLoad_1)) {
									context.setCc = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "setBcc".equals(key_tContextLoad_1)) {
									context.setBcc = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "setSubject"
												.equals(key_tContextLoad_1)) {
									context.setSubject = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "SMTPTest"
												.equals(key_tContextLoad_1)) {

									context.SMTPTest = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "setFrom".equals(key_tContextLoad_1)) {
									context.setFrom = value_tContextLoad_1;
								}

								if (key_tContextLoad_1 != null
										&& "ErrorCode"
												.equals(key_tContextLoad_1)) {

									context.ErrorCode = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "SyncCustomersCount"
												.equals(key_tContextLoad_1)) {

									context.SyncCustomersCount = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (key_tContextLoad_1 != null
										&& "SugarCRMIDCount"
												.equals(key_tContextLoad_1)) {

									context.SugarCRMIDCount = Integer
											.parseInt(value_tContextLoad_1);

								}

								if (context.getProperty(key_tContextLoad_1) != null) {
									assignList_tContextLoad_1
											.add(key_tContextLoad_1);
								} else {
									newPropertyList_tContextLoad_1
											.add(key_tContextLoad_1);
								}
								if (value_tContextLoad_1 == null) {
									context.setProperty(key_tContextLoad_1, "");
								} else {
									context.setProperty(key_tContextLoad_1,
											value_tContextLoad_1);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_1
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_1++;
						}
						// ////////////////////////

						tos_count_tContextLoad_1++;

						/**
						 * [tContextLoad_1 main ] stop
						 */

						/**
						 * [tFileInputProperties_1 end ] start
						 */

						currentComponent = "tFileInputProperties_1";

					}
				} finally {
					if (fis_tFileInputProperties_1 != null) {
						fis_tFileInputProperties_1.close();
					}
				}
				globalMap.put("tFileInputProperties_1_NB_LINE",
						nb_line_tFileInputProperties_1);

				ok_Hash.put("tFileInputProperties_1", true);
				end_Hash.put("tFileInputProperties_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputProperties_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				tJava_6Process(globalMap);

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputProperties_1 finally ] start
				 */

				currentComponent = "tFileInputProperties_1";

				/**
				 * [tFileInputProperties_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputProperties_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_6:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				// Validating Property file variables

				String MagentoURL = context.MagentoURL;
				String MagentoAPIUser = context.MagentoAPIUser;
				String MagentoAPIPassword = context.MagentoAPIPassword;
				String SugarCRMURL = context.SugarCRMURL;
				String SugarCRMPassword = context.SugarCRMPassword;
				String SugarCRMUser = context.SugarCRMUser;
				int magentoCustomerCount = context.MagentoCustomerCount;

				if (null == MagentoURL || MagentoURL.equalsIgnoreCase("")
						|| MagentoURL.equalsIgnoreCase("null")) {
					System.out.println("Invalid Magento URL");
					context.ValidateVariables = 1;
				}

				if (null == MagentoAPIUser
						|| MagentoAPIUser.equalsIgnoreCase("")
						|| MagentoAPIUser.equalsIgnoreCase("null")) {
					System.out.println("Invalid Magento API UserName ");
					context.ValidateVariables = 1;
				}

				if (null == MagentoAPIPassword
						|| MagentoAPIPassword.equalsIgnoreCase("")
						|| MagentoAPIPassword.equalsIgnoreCase("null")) {
					System.out.println("Invalid Magento API Password");
					context.ValidateVariables = 1;
				}

				if (null == SugarCRMURL || SugarCRMURL.equalsIgnoreCase("")
						|| SugarCRMURL.equalsIgnoreCase("null")) {
					System.out.println("Invalid SugarCRM URL");
					context.ValidateVariables = 1;
				}

				if (null == SugarCRMPassword
						|| SugarCRMPassword.equalsIgnoreCase("")
						|| SugarCRMPassword.equalsIgnoreCase("null")) {
					System.out.println("Invalid SugarCRM Password");
					context.ValidateVariables = 1;
				}

				if (null == SugarCRMUser || SugarCRMUser.equalsIgnoreCase("")
						|| SugarCRMUser.equalsIgnoreCase("null")) {
					System.out.println("Invalid SugarCRM User");
					context.ValidateVariables = 1;

				}

				if (magentoCustomerCount == 0) {
					System.out.println("Invalid Magento magentoCustomerCount");
					context.ValidateVariables = 1;
				}

				String smtp_msg2 = "Invalid SMTP Details ";
				if (null == context.emailSmtpPort
						|| context.emailSmtpPort.equalsIgnoreCase("")) {
					context.SMTPTest = 1;
				}

				if (null == context.emailSmtpHost
						|| context.emailSmtpHost.equalsIgnoreCase("")) {
					context.SMTPTest = 1;
				}

				if (null == context.emailSmtpUsername
						|| context.emailSmtpUsername.equalsIgnoreCase("")) {
					context.SMTPTest = 1;
				}

				if (null == context.emailSmtpPassword
						|| context.emailSmtpPassword.equalsIgnoreCase("")) {
					context.SMTPTest = 1;
				}

				if (null == context.setTo || context.setTo.equalsIgnoreCase("")) {
					context.SMTPTest = 1;
				}

				if (null == context.setCc
						|| context.setCc.equalsIgnoreCase("null")) {
					context.setCc = "";
				}
				if (null == context.setBcc
						|| context.setBcc.equalsIgnoreCase("null")) {
					context.setBcc = "";
				}

				if (null == context.setFrom
						|| context.setFrom.equalsIgnoreCase("null")) {
					context.setFrom = "";
				}

				if (null == context.setSubject
						|| context.setSubject.equalsIgnoreCase("")) {
					context.setSubject = ""; // default
					// System.out.println("setSubject >>"+context.setSubject);
				}

				if (context.SMTPTest == 1) {
					// context.err_msg = smtp_msg2;
					System.out.println("Please check !!!! " + smtp_msg2);
				}

				if (context.ValidateVariables == 1) {
					System.out
							.println("Please check !!!! Invalid Configurations");
				}

				// System.out.println("emailSmtpPort ::"+context.emailSmtpPort+"emailSmtpHost ::"+context.emailSmtpHost+"emailSmtpPassword ::"+context.emailSmtpPassword+"username ::"+context.emailSmtpUsername+"setto ::"+context.setTo+"setcc::"+context.setCc+"setbcc ::"+context.setBcc+"subject ::"+context.setSubject+"setfrom ::"+context.setFrom);

				// System.out.println("MagentoURL ::"+context.MagentoURL+"\tMagentoAPIUser ::"+context.MagentoAPIUser+"MagentoAPIPassword ::"+context.MagentoAPIPassword+"\tSugarCRMURL ::"+context.SugarCRMURL+"SugarCRMPassword ::"+context.SugarCRMPassword+"\tSugarCRMUser ::"+context.SugarCRMUser+"\tMagentoCustomerCount ::"+context.MagentoCustomerCount);

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				/**
				 * [tJava_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out
						.println("Please check File doesnot exists at path ::"
								+ context.PropertyFilePath);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];
		static byte[] commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length) {
					if (length < 1024
							&& commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length == 0) {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[1024];
					} else {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length);
				strReturn = new String(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row7.type = lcm.getType();
					row7.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row7.priority = lcm.getPriority();
					row7.message = lcm.getMessage();
					row7.code = lcm.getCode();

					row7.moment = java.util.Calendar.getInstance().getTime();

					row7.pid = pid;
					row7.root_pid = rootPid;
					row7.father_pid = fatherPid;

					row7.project = projectName;
					row7.job = jobName;
					row7.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tJavaRow_2 main ] start
					 */

					currentComponent = "tJavaRow_2";

					context.ErrorCode = 1;
					// row7.code;
					System.out.println("Error Mail Triggered !!!"
							+ row7.message);

					context.setSubject = "Email from "
							+ row7.job
							+ " Talend Crons Status : Failed "
							+ row7.message
							+ TalendDate.formatDate("dd/MM/yyyy hh.mm",
									TalendDate.getCurrentDate());

					context.EmailBody = "Hi,   "
							+ "<br><br>"
							+ "&nbsp;&nbsp;&nbsp;&nbsp;Following Exception Raised in the Talend Job "
							+ row7.job
							+ "<br><br>Exception Msg   : "
							+ row7.message
							+ "<br><br>Component  : "
							+ row7.origin
							+ "<br><br>Error type  : "
							+ row7.type
							+ "<br><br> Exception Time :   "
							+ TalendDate.formatDate("yyyy-MM-dd hh:mm:ss",
									TalendDate.getCurrentDate());

					// System.out.println("email body::"+context.EmailBody+"error code ::"+context.ErrorCode);

					nb_line_tJavaRow_2++;

					tos_count_tJavaRow_2++;

					/**
					 * [tJavaRow_2 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				tSendMail_2Process(globalMap);

				/**
				 * [tJavaRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_2 begin ] start
				 */

				ok_Hash.put("tSendMail_2", false);
				start_Hash.put("tSendMail_2", System.currentTimeMillis());

				currentComponent = "tSendMail_2";

				int tos_count_tSendMail_2 = 0;

				/**
				 * [tSendMail_2 begin ] stop
				 */

				/**
				 * [tSendMail_2 main ] start
				 */

				currentComponent = "tSendMail_2";

				String smtpHost_tSendMail_2 = context.emailSmtpHost;
				String smtpPort_tSendMail_2 = context.emailSmtpPort;
				String from_tSendMail_2 = (context.setFrom);
				String to_tSendMail_2 = (context.setTo).replace(";", ",");
				String cc_tSendMail_2 = ((context.setCc) == null || ""
						.equals(context.setCc)) ? null : (context.setCc)
						.replace(";", ",");
				String bcc_tSendMail_2 = ((context.setBcc) == null || ""
						.equals(context.setBcc)) ? null : (context.setBcc)
						.replace(";", ",");
				String subject_tSendMail_2 = (context.setSubject);

				java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();

				String message_tSendMail_2 = ((context.EmailBody) == null || ""
						.equals(context.EmailBody)) ? "\"\""
						: (context.EmailBody);
				java.util.Properties props_tSendMail_2 = System.getProperties();
				props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
				props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
				props_tSendMail_2.put("mail.mime.encodefilename", "true");
				java.security.Security
						.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
				props_tSendMail_2.put("mail.smtp.socketFactory.class",
						"javax.net.ssl.SSLSocketFactory");
				props_tSendMail_2.put("mail.smtp.socketFactory.fallback",
						"false");
				props_tSendMail_2.put("mail.smtp.socketFactory.port",
						smtpPort_tSendMail_2);
				try {

					props_tSendMail_2.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_2 = javax.mail.Session
							.getInstance(props_tSendMail_2,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_2 = context.emailSmtpPassword;

											return new javax.mail.PasswordAuthentication(
													context.emailSmtpUsername,
													decryptedPassword_tSendMail_2);
										}
									});

					javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(
							session_tSendMail_2);
					msg_tSendMail_2
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_2, null));
					msg_tSendMail_2.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_2, false));
					if (cc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_2, false));
					if (bcc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_2, false));
					msg_tSendMail_2.setSubject(subject_tSendMail_2);

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2
							.size(); i_tSendMail_2++) {
						java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2
								.get(i_tSendMail_2);
						msg_tSendMail_2.setHeader(
								header_tSendMail_2.get("KEY"),
								header_tSendMail_2.get("VALUE"));
					}
					msg_tSendMail_2.setSentDate(new Date());
					msg_tSendMail_2.setHeader("X-Priority", "1"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_2.setText(message_tSendMail_2,
							"ISO-8859-15", "html");
					mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2
							.size(); i_tSendMail_2++) {
						String filename_tSendMail_2 = attachments_tSendMail_2
								.get(i_tSendMail_2);
						javax.activation.FileDataSource fds_tSendMail_2 = null;
						java.io.File file_tSendMail_2 = new java.io.File(
								filename_tSendMail_2);

						if (!file_tSendMail_2.exists()) {
							continue;
						}

						if (file_tSendMail_2.isDirectory()) {
							java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2
									.listFiles();
							for (java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2) {
								if (subFile_tSendMail_2.isFile()) {
									fds_tSendMail_2 = new javax.activation.FileDataSource(
											subFile_tSendMail_2
													.getAbsolutePath());
									mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_2
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_2));
									mbpFile_tSendMail_2
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_2
															.getName()));
									if (contentTransferEncoding_tSendMail_2
											.get(i_tSendMail_2)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_2.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_2
											.addBodyPart(mbpFile_tSendMail_2);
								}
							}
						} else {
							mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_2 = new javax.activation.FileDataSource(
									filename_tSendMail_2);
							mbpFile_tSendMail_2
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_2));
							mbpFile_tSendMail_2
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_2
													.getName()));
							if (contentTransferEncoding_tSendMail_2.get(
									i_tSendMail_2).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_2.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
						}
					}
					// -- set the content --
					msg_tSendMail_2.setContent(mp_tSendMail_2);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_2 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_2
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_2
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_2
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_2
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_2
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_2);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_2);
				} catch (java.lang.Exception e) {

					throw (e);

				} finally {
					props_tSendMail_2.remove("mail.smtp.host");
					props_tSendMail_2.remove("mail.smtp.port");

					props_tSendMail_2.remove("mail.mime.encodefilename");

					props_tSendMail_2.remove("mail.smtp.socketFactory.class");
					props_tSendMail_2
							.remove("mail.smtp.socketFactory.fallback");
					props_tSendMail_2.remove("mail.smtp.socketFactory.port");

					props_tSendMail_2.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_2++;

				/**
				 * [tSendMail_2 main ] stop
				 */

				/**
				 * [tSendMail_2 end ] start
				 */

				currentComponent = "tSendMail_2";

				ok_Hash.put("tSendMail_2", true);
				end_Hash.put("tSendMail_2", System.currentTimeMillis());

				/**
				 * [tSendMail_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_2 finally ] start
				 */

				currentComponent = "tSendMail_2";

				/**
				 * [tSendMail_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_1_EXISTS")) == true
						&& context.ValidateVariables == 0
						&& context.SMTPTest == 0) {

					tJava_9Process(globalMap);
				}

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				int Httpcode = 0;
				java.net.URL url;
				String urlString = context.MagentoURL + "/api/?wsdl";
				url = new URL(urlString);
				HttpURLConnection huc = (HttpURLConnection) url
						.openConnection();
				huc.setRequestMethod("GET");
				huc.setReadTimeout(context.MagentoReadTimeout); // milli seconds
				huc.connect();
				Httpcode = huc.getResponseCode();
				context.MagentoConnectionCode = Httpcode;
				System.out.println("MagentoReadTimeout ::"
						+ context.MagentoReadTimeout
						+ " \tMagentoConnectionTimeout ::"
						+ context.MagentoConnectionTimeOut
						+ "\tMagento Connected !!! ");

				if (context.MagentoConnectionCode != 200) {
					throw new Exception("Magento not connecting " + urlString);
				}

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				if (context.MagentoConnectionCode == 200) {

					tWebServiceInput_1Process(globalMap);
				}

				/**
				 * [tJava_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];
		static byte[] commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];

		public Object CustomerIdsResponse;

		public Object getCustomerIdsResponse() {
			return this.CustomerIdsResponse;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync) {

				try {

					int length = 0;

					this.CustomerIdsResponse = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.CustomerIdsResponse);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerIdsResponse="
					+ String.valueOf(CustomerIdsResponse));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWebServiceInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWebServiceInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tWebServiceInput_1 begin ] start
				 */

				ok_Hash.put("tWebServiceInput_1", false);
				start_Hash
						.put("tWebServiceInput_1", System.currentTimeMillis());

				currentComponent = "tWebServiceInput_1";

				int tos_count_tWebServiceInput_1 = 0;

				int nb_line_tWebServiceInput_1 = 0;

				String url = context.MagentoURL + "/api/soap/index/";
				// System.out.println("url ::"+url);
				routines.Mage_Api_Model_Server_HandlerPortType porttype = new routines.MagentoServiceLocator()
						.getMage_Api_Model_Server_HandlerPort(new java.net.URL(
								url));
				routines.Mage_Api_Model_Server_HandlerBindingStub stub = (routines.Mage_Api_Model_Server_HandlerBindingStub) porttype;

				String sessionid = porttype.login(context.MagentoAPIUser,
						context.MagentoAPIPassword);
				context.magento_sessionId = sessionid;
				// System.out.println("Magento_sessionId >>"+context.magento_sessionId);
				// Retrieving saleorderinfo of customer from magento

				java.util.HashMap<Object, Object> Customerdetailsobj = (java.util.HashMap) porttype
						.call(sessionid, "advanceapi_customer.getAllIds", "");
				// System.out.println("CustomerListObj >>"+Customerdetailsobj);
				row1.CustomerIdsResponse = Customerdetailsobj;

				nb_line_tWebServiceInput_1++;

				/**
				 * [tWebServiceInput_1 begin ] stop
				 */

				/**
				 * [tWebServiceInput_1 main ] start
				 */

				currentComponent = "tWebServiceInput_1";

				tos_count_tWebServiceInput_1++;

				/**
				 * [tWebServiceInput_1 main ] stop
				 */

				/**
				 * [tJavaRow_1 main ] start
				 */

				currentComponent = "tJavaRow_1";

				String customer_count = "", customerid = "";
				int remainderCount = 0, TotalListCount = 0;

				ArrayList<String> CustomerIds = (ArrayList) context.MagentoIDList;
				ArrayList<Object> masterList = (ArrayList) context.MasterIDSList;

				java.util.HashMap<Object, Object> customerdetails = (java.util.HashMap) row1.CustomerIdsResponse;
				int CustomerCount = (Integer) customerdetails
						.get("customer_count");
				context.CustomerCount = CustomerCount;
				// System.out.println("CustomerIDs Count ::"+CustomerCount);
				if (CustomerCount > 0) {
					String[] customerIds = (String[]) customerdetails
							.get("customer_ids");
					// System.out.println("customerids list"+customerIds);
					for (int i = 0; i < customerIds.length; i++) {
						customerid = customerIds[i];
						CustomerIds.add(customerid);
					}
					// System.out.println("CustomerIds **** >>"+CustomerIds);

					TotalListCount = CustomerIds.size(); // Total Customer IDs
															// count
					double count = Math.ceil(TotalListCount
							/ context.MagentoCustomerCount);
					remainderCount = (TotalListCount % context.MagentoCustomerCount);

					int ListCount = (int) count;
					// System.out.println("MagentoCustomerCount ::"+context.MagentoCustomerCount);
					// System.out.println("ListCount ::"+ListCount+"TotalListCount ::"+TotalListCount+"remainderCount ::"+remainderCount+"Sublistcount ::"+context.SubListCount);

					if (ListCount == 1) {
						masterList.add(CustomerIds);
					} else if (ListCount > 0) {
						int masterListIndex = 0;
						for (int i = 0; i < ListCount; i++) {
							ArrayList<String> sublist = new ArrayList<String>();
							for (int j = 0; j < context.MagentoCustomerCount; j++) {
								if (masterListIndex != TotalListCount) {
									sublist.add(CustomerIds
											.get(masterListIndex));
									masterListIndex += 1;
								}
							}

							if (i == (ListCount - 1) && remainderCount > 0) {
								ArrayList<String> sublist1 = new ArrayList<String>();
								for (int j = 0; j < remainderCount; j++) { // +remaindercount
									if (masterListIndex != TotalListCount) {
										sublist1.add(CustomerIds
												.get(masterListIndex));
										masterListIndex += 1;
									}
								}
								// System.out.println("masterListIndex ::"+masterListIndex);
								masterList.add(sublist1);
							}
							masterList.add(sublist);
						}
					}
					context.MasterListSize = masterList.size();
					System.out.println("MasterCustomerIDsList ::" + masterList
							+ "\tMasterListSize ::" + context.MasterListSize);
				} else {
					// System.out.println("No Customer Found for syncing and Count ::"+CustomerCount);
				}
				nb_line_tJavaRow_1++;

				tos_count_tJavaRow_1++;

				/**
				 * [tJavaRow_1 main ] stop
				 */

				/**
				 * [tWebServiceInput_1 end ] start
				 */

				currentComponent = "tWebServiceInput_1";

				globalMap.put("tWebServiceInput_1_NB_LINE",
						nb_line_tWebServiceInput_1);

				ok_Hash.put("tWebServiceInput_1", true);
				end_Hash.put("tWebServiceInput_1", System.currentTimeMillis());

				/**
				 * [tWebServiceInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if (context.CustomerCount > 0) {

					tLoop_2Process(globalMap);
				}

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWebServiceInput_1 finally ] start
				 */

				currentComponent = "tWebServiceInput_1";

				/**
				 * [tWebServiceInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWebServiceInput_1_SUBPROCESS_STATE", 1);
	}

	public void tLoop_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLoop_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLoop_2 begin ] start
				 */

				int NB_ITERATE_tWebServiceInput_5 = 0; // for statistics

				ok_Hash.put("tLoop_2", false);
				start_Hash.put("tLoop_2", System.currentTimeMillis());

				currentComponent = "tLoop_2";

				int tos_count_tLoop_2 = 0;

				int current_iteration_tLoop_2 = 0;

				for (int looptLoop_2 = 0; looptLoop_2 <= context.MasterListSize - 1; looptLoop_2 = looptLoop_2 + 1) {

					current_iteration_tLoop_2++;
					globalMap.put("tLoop_2_CURRENT_VALUE", looptLoop_2);
					globalMap.put("tLoop_2_CURRENT_ITERATION",
							current_iteration_tLoop_2);

					/**
					 * [tLoop_2 begin ] stop
					 */

					/**
					 * [tLoop_2 main ] start
					 */

					currentComponent = "tLoop_2";

					tos_count_tLoop_2++;

					/**
					 * [tLoop_2 main ] stop
					 */
					NB_ITERATE_tWebServiceInput_5++;

					/**
					 * [tWebServiceInput_5 begin ] start
					 */

					ok_Hash.put("tWebServiceInput_5", false);
					start_Hash.put("tWebServiceInput_5",
							System.currentTimeMillis());

					currentComponent = "tWebServiceInput_5";

					int tos_count_tWebServiceInput_5 = 0;

					int nb_line_tWebServiceInput_5 = 0;

					String customerId = "";
					HashMap<Object, Object> CustomerAddressHashMap = (HashMap<Object, Object>) context.CustomerAddressHashMap;
					// New arraylist for adding current ids list to magentoapi
					// for getting address list
					ArrayList<Object> CustomerIdsList = new ArrayList<Object>();

					// Master Ids list contains all customers ids sublist
					ArrayList<Object> masterList1 = (ArrayList) context.MasterIDSList;
					ArrayList<String> customerSubList = (ArrayList<String>) masterList1
							.get((Integer) globalMap
									.get("tLoop_2_CURRENT_ITERATION") - 1);
					context.MasterSubIDList = customerSubList;
					CustomerIdsList.add(customerSubList);
					context.CustomerLength = customerSubList.size();
					// System.out.println("CustomerIds1 >> "+CustomerIdsList+"Size ::"+context.CustomerLength);

					String url2 = context.MagentoURL + "/api/soap/index/";

					routines.Mage_Api_Model_Server_HandlerPortType porttype2 = new routines.MagentoServiceLocator()
							.getMage_Api_Model_Server_HandlerPort(new java.net.URL(
									url2));
					routines.Mage_Api_Model_Server_HandlerBindingStub stub2 = (routines.Mage_Api_Model_Server_HandlerBindingStub) porttype2;

					Object CustomerinfoObj = (Object) porttype2.call(
							context.magento_sessionId,
							"advanceapi_customer.itemslist", CustomerIdsList);
					java.util.HashMap<Object, Object>[] customeraddress = (java.util.HashMap[]) CustomerinfoObj;
					// System.out.println("CustomerinfoObj >>"+customeraddress.getClass());

					// Getting the customer details and adding it to global
					// hashmap for futher processing
					for (java.util.Map<Object, Object> map1 : customeraddress) {
						customerId = (String) map1.get("customer_id");
						CustomerAddressHashMap.put("default_billing_"
								+ customerId,
								(String) map1.get("default_billing"));
						CustomerAddressHashMap.put("created_at_" + customerId,
								(String) map1.get("created_at"));
						CustomerAddressHashMap.put("email_" + customerId,
								(String) map1.get("email"));
						CustomerAddressHashMap.put("updated_at_" + customerId,
								(String) map1.get("updated_at"));
						CustomerAddressHashMap.put("firstname_" + customerId,
								(String) map1.get("firstname"));
						CustomerAddressHashMap.put("lastname_" + customerId,
								(String) map1.get("lastname"));
						CustomerAddressHashMap.put("address_count_"
								+ customerId,
								(Integer) map1.get("address_count"));
						CustomerAddressHashMap.put("addresses_" + customerId,
								(Object) map1.get("addresses"));
					}
					// System.out.println("CustomerAddressHashMap ::"+CustomerAddressHashMap);

					nb_line_tWebServiceInput_5++;

					/**
					 * [tWebServiceInput_5 begin ] stop
					 */

					/**
					 * [tWebServiceInput_5 main ] start
					 */

					currentComponent = "tWebServiceInput_5";

					tos_count_tWebServiceInput_5++;

					/**
					 * [tWebServiceInput_5 main ] stop
					 */

					/**
					 * [tWebServiceInput_5 end ] start
					 */

					currentComponent = "tWebServiceInput_5";

					globalMap.put("tWebServiceInput_5_NB_LINE",
							nb_line_tWebServiceInput_5);

					ok_Hash.put("tWebServiceInput_5", true);
					end_Hash.put("tWebServiceInput_5",
							System.currentTimeMillis());

					tLoop_1Process(globalMap);

					/**
					 * [tWebServiceInput_5 end ] stop
					 */

					/**
					 * [tLoop_2 end ] start
					 */

					currentComponent = "tLoop_2";

				}

				ok_Hash.put("tLoop_2", true);
				end_Hash.put("tLoop_2", System.currentTimeMillis());

				/**
				 * [tLoop_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLoop_2 finally ] start
				 */

				currentComponent = "tLoop_2";

				/**
				 * [tLoop_2 finally ] stop
				 */

				/**
				 * [tWebServiceInput_5 finally ] start
				 */

				currentComponent = "tWebServiceInput_5";

				/**
				 * [tWebServiceInput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLoop_2_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];
		static byte[] commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public Integer deleted;

		public Integer getDeleted() {
			return this.deleted;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.id = this.id;
			other.deleted = this.deleted;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length) {
					if (length < 1024
							&& commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length == 0) {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[1024];
					} else {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length);
				strReturn = new String(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.deleted = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// Integer

				writeInteger(this.deleted, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",deleted=" + String.valueOf(deleted));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLoop_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();

				/**
				 * [tLoop_1 begin ] start
				 */

				int NB_ITERATE_tJava_3 = 0; // for statistics

				ok_Hash.put("tLoop_1", false);
				start_Hash.put("tLoop_1", System.currentTimeMillis());

				currentComponent = "tLoop_1";

				int tos_count_tLoop_1 = 0;

				int current_iteration_tLoop_1 = 0;

				for (int looptLoop_1 = 0; looptLoop_1 <= context.CustomerLength - 1; looptLoop_1 = looptLoop_1 + 1) {

					current_iteration_tLoop_1++;
					globalMap.put("tLoop_1_CURRENT_VALUE", looptLoop_1);
					globalMap.put("tLoop_1_CURRENT_ITERATION",
							current_iteration_tLoop_1);

					/**
					 * [tLoop_1 begin ] stop
					 */

					/**
					 * [tLoop_1 main ] start
					 */

					currentComponent = "tLoop_1";

					tos_count_tLoop_1++;

					/**
					 * [tLoop_1 main ] stop
					 */
					NB_ITERATE_tJava_3++;

					/**
					 * [tJava_3 begin ] start
					 */

					int NB_ITERATE_tSugarCRMInput_1 = 0; // for statistics

					ok_Hash.put("tJava_3", false);
					start_Hash.put("tJava_3", System.currentTimeMillis());

					currentComponent = "tJava_3";

					int tos_count_tJava_3 = 0;

					// Extracting the Customer ids from list and iterating over
					// it .
					HashMap<Object, Object> CustomerAddressHashMap1 = (HashMap<Object, Object>) context.CustomerAddressHashMap;

					ArrayList<Object> CustomerList = (ArrayList<Object>) context.MasterSubIDList;
					// System.out.println("customerID main sub list::"+CustomerList);
					context.indexval = CustomerList.get((Integer) globalMap
							.get("tLoop_1_CURRENT_ITERATION") - 1);
					context.cus_id = (String) context.indexval;
					System.out.println("customerID ::" + context.cus_id);

					// Assigning values to global variables customer details for
					// syncing to SugarCRM
					java.text.SimpleDateFormat sdf = new SimpleDateFormat(
							"yyyy-MM-dd hh:mm:ss");
					java.text.DateFormat formatter = new SimpleDateFormat(
							"yyyy-MM-dd");
					String datecreated = (String) CustomerAddressHashMap1
							.get("created_at_" + context.indexval);
					// System.out.println("created at......"+datecreated);

					java.util.Date CreatedDate = formatter.parse(datecreated);
					java.sql.Date CreatedDate1 = new java.sql.Date(
							CreatedDate.getTime());
					context.create_at = CreatedDate1;
					String updateDate = (String) CustomerAddressHashMap1
							.get("updated_at_" + context.indexval);
					java.util.Date UpdateDate = formatter.parse(updateDate);
					java.sql.Date UpdateDate1 = new java.sql.Date(
							UpdateDate.getTime());
					context.update_at = UpdateDate1;

					String emailId = (String) CustomerAddressHashMap1
							.get("email_" + context.indexval);
					context.email = (emailId.isEmpty() || null == emailId || emailId
							.equalsIgnoreCase("null")) ? "" : emailId;

					String fName = (String) CustomerAddressHashMap1
							.get("firstname_" + context.indexval);
					context.firstname = (fName.isEmpty() || null == fName || fName
							.equalsIgnoreCase("null")) ? "" : fName;

					String lastname = (String) CustomerAddressHashMap1
							.get("lastname_" + context.indexval);
					context.lname = (lastname.isEmpty() || null == lastname || lastname
							.equalsIgnoreCase("null")) ? "" : lastname;

					int addressCount = (Integer) CustomerAddressHashMap1
							.get("address_count_" + context.indexval);
					Object addressDetailsMap = (Object) CustomerAddressHashMap1
							.get("addresses_" + context.indexval);
					// System.out.println("addressList type :: "+addressDetailsMap.getClass());

					if (addressCount > 0) {
						HashMap<Object, Object>[] AddressMapDetails = (HashMap<Object, Object>[]) addressDetailsMap;
						// System.out.println("AddressMapDetails ::"+AddressMapDetails+">>"+AddressMapDetails.getClass());
						for (java.util.Map<Object, Object> AddressMap : AddressMapDetails) {
							String c_city = (String) AddressMap.get("city");
							context.city = (c_city.isEmpty() || null == c_city || c_city
									.equalsIgnoreCase("null")) ? "" : c_city;

							String c_phone = (String) AddressMap
									.get("telephone");
							context.telephone = (c_phone.isEmpty()
									|| null == c_phone || c_phone
									.equalsIgnoreCase("null")) ? "" : c_phone;

							String c_street = (String) AddressMap.get("street");
							context.street = (c_street.isEmpty()
									|| null == c_street || c_street
									.equalsIgnoreCase("null")) ? "" : c_street;

							String c_postcode = (String) AddressMap
									.get("postcode");
							context.postcode = (c_postcode.isEmpty()
									|| null == c_postcode || c_postcode
									.equalsIgnoreCase("null")) ? ""
									: c_postcode;

							String c_prefix = (String) AddressMap.get("prefix");
							context.salutation = (null == c_prefix
									|| c_prefix.equalsIgnoreCase("null") || c_prefix
									.isEmpty()) ? "" : c_prefix;
						}

						// System.out.println("CreateDate ::"+context.create_at+"\tUpdateDate ::"+context.update_at+"CustomerID ::\t"+context.cus_id+"\tSalutation ::"+context.salutation+"\tFirstName ::"+context.firstname+"LastName ::"+context.lname+"\tTelephone ::"+context.telephone+"EmailID ::"+context.email+"\tStreet ::\t"+context.street+"City ::"+context.city+"\tPostcode ::"+context.postcode);

					} else {
						// System.out.println("No address details exists for customer with ID ::"+context.cus_id);
						context.city = "";
						context.telephone = "";
						context.street = "";
						context.postcode = "";
						context.salutation = "";
					}

					/**
					 * [tJava_3 begin ] stop
					 */

					/**
					 * [tJava_3 main ] start
					 */

					currentComponent = "tJava_3";

					tos_count_tJava_3++;

					/**
					 * [tJava_3 main ] stop
					 */
					NB_ITERATE_tSugarCRMInput_1++;

					/**
					 * [tJavaRow_7 begin ] start
					 */

					ok_Hash.put("tJavaRow_7", false);
					start_Hash.put("tJavaRow_7", System.currentTimeMillis());

					currentComponent = "tJavaRow_7";

					int tos_count_tJavaRow_7 = 0;

					int nb_line_tJavaRow_7 = 0;

					/**
					 * [tJavaRow_7 begin ] stop
					 */

					/**
					 * [tSugarCRMInput_1 begin ] start
					 */

					ok_Hash.put("tSugarCRMInput_1", false);
					start_Hash.put("tSugarCRMInput_1",
							System.currentTimeMillis());

					currentComponent = "tSugarCRMInput_1";

					int tos_count_tSugarCRMInput_1 = 0;

					// //////////////////////////

					class Util_tSugarCRMInput_1 {
						public String getFieldbyOrder(int index,
								String[] filedArr,
								org.talend.sugarws.Name_value[] nameValue) {

							String fieldName = filedArr[index].trim();
							for (int j = 0; j < nameValue.length; j++) {
								if (fieldName.equals(nameValue[j].getName())) {
									return nameValue[j].getValue();
								}
							}
							return "";
						}
					}

					int nb_line_tSugarCRMInput_1 = 0;
					String modulename_tSugarCRMInput_1 = "Contacts";

					final String decryptedPassword_tSugarCRMInput_1 = context.SugarCRMPassword;

					org.talend.SugarManagement.SugarManagement sugarManagement_tSugarCRMInput_1 = new org.talend.SugarManagement.SugarManagementImpl(
							context.SugarCRMUser,
							decryptedPassword_tSugarCRMInput_1,
							context.SugarCRMURL, "sugarcrm", "5.2.0");
					sugarManagement_tSugarCRMInput_1.login();

					String[] filedArr_tSugarCRMInput_1 = new String[] { "id",
							"deleted", };

					String condition_tSugarCRMInput_1 = "";

					Util_tSugarCRMInput_1 util_tSugarCRMInput_1 = new Util_tSugarCRMInput_1();

					condition_tSugarCRMInput_1 = "contacts.assigned_user_id="
							+ context.cus_id + "&& contacts.deleted='0'";

					org.talend.sugarws.Get_entry_list_result getEntryListResult_tSugarCRMInput_1 = sugarManagement_tSugarCRMInput_1
							.getRecordswithQuery(modulename_tSugarCRMInput_1,
									condition_tSugarCRMInput_1,
									filedArr_tSugarCRMInput_1, 0, 100);

					if (getEntryListResult_tSugarCRMInput_1.getResult_count() < 0) {
						System.err.println("Error Code:"
								+ getEntryListResult_tSugarCRMInput_1
										.getError().getNumber());
						System.err.println(getEntryListResult_tSugarCRMInput_1
								.getError().getName());
						System.err.println(getEntryListResult_tSugarCRMInput_1
								.getError().getDescription());
					}
					// read the record from remote, one time 100 records.
					while (getEntryListResult_tSugarCRMInput_1
							.getResult_count() > 0) {
						org.talend.sugarws.Entry_value[] entry_value_tSugarCRMInput_1 = getEntryListResult_tSugarCRMInput_1
								.getEntry_list();
						// get every record
						for (int i_tSugarCRMInput_1 = 0; i_tSugarCRMInput_1 < entry_value_tSugarCRMInput_1.length; i_tSugarCRMInput_1++) {
							org.talend.sugarws.Name_value[] nameValue_tSugarCRMInput_1 = entry_value_tSugarCRMInput_1[i_tSugarCRMInput_1]
									.getName_value_list();
							nb_line_tSugarCRMInput_1++;

							// ////////

							String crmReturnValue_tSugarCRMInput_1;

							crmReturnValue_tSugarCRMInput_1 = util_tSugarCRMInput_1
									.getFieldbyOrder(0,
											filedArr_tSugarCRMInput_1,
											nameValue_tSugarCRMInput_1);
							if (!"".equals(crmReturnValue_tSugarCRMInput_1)) {
								row9.id = crmReturnValue_tSugarCRMInput_1;

							} else {

								row9.id = null;
							}

							crmReturnValue_tSugarCRMInput_1 = util_tSugarCRMInput_1
									.getFieldbyOrder(1,
											filedArr_tSugarCRMInput_1,
											nameValue_tSugarCRMInput_1);
							if (!"".equals(crmReturnValue_tSugarCRMInput_1)) {
								row9.deleted = ParserUtils
										.parseTo_Integer(crmReturnValue_tSugarCRMInput_1);

							} else {

								row9.deleted = null;
							}

							// //////////////////////////

							/**
							 * [tSugarCRMInput_1 begin ] stop
							 */

							/**
							 * [tSugarCRMInput_1 main ] start
							 */

							currentComponent = "tSugarCRMInput_1";

							tos_count_tSugarCRMInput_1++;

							/**
							 * [tSugarCRMInput_1 main ] stop
							 */

							/**
							 * [tJavaRow_7 main ] start
							 */

							currentComponent = "tJavaRow_7";

							context.SugarCRMCustomerID = row9.id;
							// System.out.println("deleted :: "+row9.deleted);

							nb_line_tJavaRow_7++;

							tos_count_tJavaRow_7++;

							/**
							 * [tJavaRow_7 main ] stop
							 */

							/**
							 * [tSugarCRMInput_1 end ] start
							 */

							currentComponent = "tSugarCRMInput_1";

						}

						getEntryListResult_tSugarCRMInput_1 = sugarManagement_tSugarCRMInput_1
								.getRecordswithQuery(
										modulename_tSugarCRMInput_1,
										condition_tSugarCRMInput_1,
										filedArr_tSugarCRMInput_1,
										getEntryListResult_tSugarCRMInput_1
												.getNext_offset(), 100);
					}

					sugarManagement_tSugarCRMInput_1.logout();

					globalMap.put("tSugarCRMInput_1_NB_LINE",
							nb_line_tSugarCRMInput_1);

					ok_Hash.put("tSugarCRMInput_1", true);
					end_Hash.put("tSugarCRMInput_1", System.currentTimeMillis());

					/**
					 * [tSugarCRMInput_1 end ] stop
					 */

					/**
					 * [tJavaRow_7 end ] start
					 */

					currentComponent = "tJavaRow_7";

					globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

					ok_Hash.put("tJavaRow_7", true);
					end_Hash.put("tJavaRow_7", System.currentTimeMillis());

					tJava_11Process(globalMap);

					/**
					 * [tJavaRow_7 end ] stop
					 */

					/**
					 * [tJava_3 end ] start
					 */

					currentComponent = "tJava_3";

					ok_Hash.put("tJava_3", true);
					end_Hash.put("tJava_3", System.currentTimeMillis());

					/**
					 * [tJava_3 end ] stop
					 */

					/**
					 * [tLoop_1 end ] start
					 */

					currentComponent = "tLoop_1";

				}

				ok_Hash.put("tLoop_1", true);
				end_Hash.put("tLoop_1", System.currentTimeMillis());

				/**
				 * [tLoop_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLoop_1 finally ] start
				 */

				currentComponent = "tLoop_1";

				/**
				 * [tLoop_1 finally ] stop
				 */

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */

				/**
				 * [tSugarCRMInput_1 finally ] start
				 */

				currentComponent = "tSugarCRMInput_1";

				/**
				 * [tSugarCRMInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());

				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				context.SugarCRMIDCount = ((Integer) globalMap
						.get("tSugarCRMInput_1_NB_LINE"));
				// System.out.println("SugarCRMIDCount ::"+context.SugarCRMIDCount);

				if (context.SugarCRMIDCount == 0) {
					context.SyncCustomersCount++;
					// System.out.println("SugarCRM Customer sync count ::"+context.SyncCustomersCount);
				}

				// System.out.println("isempty"+context.SugarCRMCustomerID.isEmpty()+"equal ::"+context.SugarCRMCustomerID.equalsIgnoreCase(""));

				/**
				 * [tJava_11 begin ] stop
				 */

				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */

				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				if (context.SugarCRMIDCount == 0

				) {

					tFixedFlowInput_3Process(globalMap);
				}

				if (context.SugarCRMIDCount == 1

				) {

					tJava_13Process(globalMap);
				}

				/**
				 * [tJava_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_11 finally ] start
				 */

				currentComponent = "tJava_11";

				/**
				 * [tJava_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public static class SugarCRM_ContactsStruct implements
			routines.system.IPersistableRow<SugarCRM_ContactsStruct> {
		final static byte[] commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];
		static byte[] commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];

		public java.util.Date date_entered;

		public java.util.Date getDate_entered() {
			return this.date_entered;
		}

		public java.util.Date date_modified;

		public java.util.Date getDate_modified() {
			return this.date_modified;
		}

		public String assigned_user_id;

		public String getAssigned_user_id() {
			return this.assigned_user_id;
		}

		public String salutation;

		public String getSalutation() {
			return this.salutation;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String phone_mobile;

		public String getPhone_mobile() {
			return this.phone_mobile;
		}

		public String phone_work;

		public String getPhone_work() {
			return this.phone_work;
		}

		public String email1;

		public String getEmail1() {
			return this.email1;
		}

		public String primary_address_street;

		public String getPrimary_address_street() {
			return this.primary_address_street;
		}

		public String primary_address_city;

		public String getPrimary_address_city() {
			return this.primary_address_city;
		}

		public String primary_address_postalcode;

		public String getPrimary_address_postalcode() {
			return this.primary_address_postalcode;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length) {
					if (length < 1024
							&& commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length == 0) {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[1024];
					} else {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length);
				strReturn = new String(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync) {

				try {

					int length = 0;

					this.date_entered = readDate(dis);

					this.date_modified = readDate(dis);

					this.assigned_user_id = readString(dis);

					this.salutation = readString(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.phone_mobile = readString(dis);

					this.phone_work = readString(dis);

					this.email1 = readString(dis);

					this.primary_address_street = readString(dis);

					this.primary_address_city = readString(dis);

					this.primary_address_postalcode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date_entered, dos);

				// java.util.Date

				writeDate(this.date_modified, dos);

				// String

				writeString(this.assigned_user_id, dos);

				// String

				writeString(this.salutation, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.phone_mobile, dos);

				// String

				writeString(this.phone_work, dos);

				// String

				writeString(this.email1, dos);

				// String

				writeString(this.primary_address_street, dos);

				// String

				writeString(this.primary_address_city, dos);

				// String

				writeString(this.primary_address_postalcode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_entered=" + String.valueOf(date_entered));
			sb.append(",date_modified=" + String.valueOf(date_modified));
			sb.append(",assigned_user_id=" + assigned_user_id);
			sb.append(",salutation=" + salutation);
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",phone_mobile=" + phone_mobile);
			sb.append(",phone_work=" + phone_work);
			sb.append(",email1=" + email1);
			sb.append(",primary_address_street=" + primary_address_street);
			sb.append(",primary_address_city=" + primary_address_city);
			sb.append(",primary_address_postalcode="
					+ primary_address_postalcode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SugarCRM_ContactsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];
		static byte[] commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[0];

		public java.util.Date date_entered;

		public java.util.Date getDate_entered() {
			return this.date_entered;
		}

		public java.util.Date date_modified;

		public java.util.Date getDate_modified() {
			return this.date_modified;
		}

		public String assigned_user_id;

		public String getAssigned_user_id() {
			return this.assigned_user_id;
		}

		public String salutation;

		public String getSalutation() {
			return this.salutation;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String last_name;

		public String getLast_name() {
			return this.last_name;
		}

		public String phone_mobile;

		public String getPhone_mobile() {
			return this.phone_mobile;
		}

		public String phone_work;

		public String getPhone_work() {
			return this.phone_work;
		}

		public String email1;

		public String getEmail1() {
			return this.email1;
		}

		public String primary_address_street;

		public String getPrimary_address_street() {
			return this.primary_address_street;
		}

		public String primary_address_city;

		public String getPrimary_address_city() {
			return this.primary_address_city;
		}

		public String primary_address_postalcode;

		public String getPrimary_address_postalcode() {
			return this.primary_address_postalcode;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length) {
					if (length < 1024
							&& commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync.length == 0) {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[1024];
					} else {
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length);
				strReturn = new String(
						commonByteArray_MAGENTOSUGARCRM_Magento2SugarCRMSync,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MAGENTOSUGARCRM_Magento2SugarCRMSync) {

				try {

					int length = 0;

					this.date_entered = readDate(dis);

					this.date_modified = readDate(dis);

					this.assigned_user_id = readString(dis);

					this.salutation = readString(dis);

					this.first_name = readString(dis);

					this.last_name = readString(dis);

					this.phone_mobile = readString(dis);

					this.phone_work = readString(dis);

					this.email1 = readString(dis);

					this.primary_address_street = readString(dis);

					this.primary_address_city = readString(dis);

					this.primary_address_postalcode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date_entered, dos);

				// java.util.Date

				writeDate(this.date_modified, dos);

				// String

				writeString(this.assigned_user_id, dos);

				// String

				writeString(this.salutation, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.last_name, dos);

				// String

				writeString(this.phone_mobile, dos);

				// String

				writeString(this.phone_work, dos);

				// String

				writeString(this.email1, dos);

				// String

				writeString(this.primary_address_street, dos);

				// String

				writeString(this.primary_address_city, dos);

				// String

				writeString(this.primary_address_postalcode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date_entered=" + String.valueOf(date_entered));
			sb.append(",date_modified=" + String.valueOf(date_modified));
			sb.append(",assigned_user_id=" + assigned_user_id);
			sb.append(",salutation=" + salutation);
			sb.append(",first_name=" + first_name);
			sb.append(",last_name=" + last_name);
			sb.append(",phone_mobile=" + phone_mobile);
			sb.append(",phone_work=" + phone_work);
			sb.append(",email1=" + email1);
			sb.append(",primary_address_street=" + primary_address_street);
			sb.append(",primary_address_city=" + primary_address_city);
			sb.append(",primary_address_postalcode="
					+ primary_address_postalcode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				SugarCRM_ContactsStruct SugarCRM_Contacts = new SugarCRM_ContactsStruct();

				/**
				 * [tSugarCRMOutput_1 begin ] start
				 */

				ok_Hash.put("tSugarCRMOutput_1", false);
				start_Hash.put("tSugarCRMOutput_1", System.currentTimeMillis());

				currentComponent = "tSugarCRMOutput_1";

				int tos_count_tSugarCRMOutput_1 = 0;

				int nb_line_tSugarCRMOutput_1 = 0;
				String modulename_tSugarCRMOutput_1 = "Contacts";

				final String decryptedPassword_tSugarCRMOutput_1 = context.SugarCRMPassword;

				org.talend.SugarManagement.SugarManagement sugarManagement_tSugarCRMOutput_1 = new org.talend.SugarManagement.SugarManagementImpl(
						context.SugarCRMUser,
						decryptedPassword_tSugarCRMOutput_1,
						context.SugarCRMURL, "sugarcrm", "5.2.0");
				sugarManagement_tSugarCRMOutput_1.login();

				/**
				 * [tSugarCRMOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				SugarCRM_ContactsStruct SugarCRM_Contacts_tmp = new SugarCRM_ContactsStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_3 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_3", false);
				start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_3";

				int tos_count_tFixedFlowInput_3 = 0;

				for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {

					row4.date_entered = context.create_at;

					row4.date_modified = context.update_at;

					row4.assigned_user_id = context.cus_id;

					row4.salutation = context.salutation;

					row4.first_name = context.firstname;

					row4.last_name = context.lname;

					row4.phone_mobile = context.telephone;

					row4.phone_work = context.telephone;

					row4.email1 = context.email;

					row4.primary_address_street = context.street;

					row4.primary_address_city = context.city;

					row4.primary_address_postalcode = context.postcode;

					/**
					 * [tFixedFlowInput_3 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_3 main ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					tos_count_tFixedFlowInput_3++;

					/**
					 * [tFixedFlowInput_3 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						SugarCRM_Contacts = null;

						// # Output table : 'SugarCRM_Contacts'
						SugarCRM_Contacts_tmp.date_entered = row4.date_entered;
						SugarCRM_Contacts_tmp.date_modified = row4.date_modified;
						SugarCRM_Contacts_tmp.assigned_user_id = row4.assigned_user_id;
						SugarCRM_Contacts_tmp.salutation = row4.salutation;
						SugarCRM_Contacts_tmp.first_name = row4.first_name;
						SugarCRM_Contacts_tmp.last_name = row4.last_name;
						SugarCRM_Contacts_tmp.phone_mobile = row4.phone_mobile;
						SugarCRM_Contacts_tmp.phone_work = row4.phone_work;
						SugarCRM_Contacts_tmp.email1 = row4.email1;
						SugarCRM_Contacts_tmp.primary_address_street = row4.primary_address_street;
						SugarCRM_Contacts_tmp.primary_address_city = row4.primary_address_city;
						SugarCRM_Contacts_tmp.primary_address_postalcode = row4.primary_address_postalcode;
						SugarCRM_Contacts = SugarCRM_Contacts_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "SugarCRM_Contacts"
					if (SugarCRM_Contacts != null) {

						/**
						 * [tSugarCRMOutput_1 main ] start
						 */

						currentComponent = "tSugarCRMOutput_1";

						// /////////////////////

						org.talend.sugarws.Name_value[] nameValues_tSugarCRMOutput_1 = new org.talend.sugarws.Name_value[12];

						nameValues_tSugarCRMOutput_1[0] = new org.talend.sugarws.Name_value(
								"date_entered", "");
						if (SugarCRM_Contacts.date_entered != null) { //
							nameValues_tSugarCRMOutput_1[0]
									.setValue(FormatterUtils.format_Date(
											SugarCRM_Contacts.date_entered,
											"yyyy-MM-dd hh:mm:ss"));

						} //

						nameValues_tSugarCRMOutput_1[1] = new org.talend.sugarws.Name_value(
								"date_modified", "");
						if (SugarCRM_Contacts.date_modified != null) { //
							nameValues_tSugarCRMOutput_1[1]
									.setValue(FormatterUtils.format_Date(
											SugarCRM_Contacts.date_modified,
											"yyyy-MM-dd hh:mm:ss"));

						} //

						nameValues_tSugarCRMOutput_1[2] = new org.talend.sugarws.Name_value(
								"assigned_user_id", "");
						if (SugarCRM_Contacts.assigned_user_id != null) { //
							nameValues_tSugarCRMOutput_1[2]
									.setValue(String
											.valueOf(SugarCRM_Contacts.assigned_user_id));

						} //

						nameValues_tSugarCRMOutput_1[3] = new org.talend.sugarws.Name_value(
								"salutation", "");
						if (SugarCRM_Contacts.salutation != null) { //
							nameValues_tSugarCRMOutput_1[3].setValue(String
									.valueOf(SugarCRM_Contacts.salutation));

						} //

						nameValues_tSugarCRMOutput_1[4] = new org.talend.sugarws.Name_value(
								"first_name", "");
						if (SugarCRM_Contacts.first_name != null) { //
							nameValues_tSugarCRMOutput_1[4].setValue(String
									.valueOf(SugarCRM_Contacts.first_name));

						} //

						nameValues_tSugarCRMOutput_1[5] = new org.talend.sugarws.Name_value(
								"last_name", "");
						if (SugarCRM_Contacts.last_name != null) { //
							nameValues_tSugarCRMOutput_1[5].setValue(String
									.valueOf(SugarCRM_Contacts.last_name));

						} //

						nameValues_tSugarCRMOutput_1[6] = new org.talend.sugarws.Name_value(
								"phone_mobile", "");
						if (SugarCRM_Contacts.phone_mobile != null) { //
							nameValues_tSugarCRMOutput_1[6].setValue(String
									.valueOf(SugarCRM_Contacts.phone_mobile));

						} //

						nameValues_tSugarCRMOutput_1[7] = new org.talend.sugarws.Name_value(
								"phone_work", "");
						if (SugarCRM_Contacts.phone_work != null) { //
							nameValues_tSugarCRMOutput_1[7].setValue(String
									.valueOf(SugarCRM_Contacts.phone_work));

						} //

						nameValues_tSugarCRMOutput_1[8] = new org.talend.sugarws.Name_value(
								"email1", "");
						if (SugarCRM_Contacts.email1 != null) { //
							nameValues_tSugarCRMOutput_1[8].setValue(String
									.valueOf(SugarCRM_Contacts.email1));

						} //

						nameValues_tSugarCRMOutput_1[9] = new org.talend.sugarws.Name_value(
								"primary_address_street", "");
						if (SugarCRM_Contacts.primary_address_street != null) { //
							nameValues_tSugarCRMOutput_1[9]
									.setValue(String
											.valueOf(SugarCRM_Contacts.primary_address_street));

						} //

						nameValues_tSugarCRMOutput_1[10] = new org.talend.sugarws.Name_value(
								"primary_address_city", "");
						if (SugarCRM_Contacts.primary_address_city != null) { //
							nameValues_tSugarCRMOutput_1[10]
									.setValue(String
											.valueOf(SugarCRM_Contacts.primary_address_city));

						} //

						nameValues_tSugarCRMOutput_1[11] = new org.talend.sugarws.Name_value(
								"primary_address_postalcode", "");
						if (SugarCRM_Contacts.primary_address_postalcode != null) { //
							nameValues_tSugarCRMOutput_1[11]
									.setValue(String
											.valueOf(SugarCRM_Contacts.primary_address_postalcode));

						} //

						String id_tSugarCRMOutput_1 = sugarManagement_tSugarCRMOutput_1
								.setRecord(modulename_tSugarCRMOutput_1,
										nameValues_tSugarCRMOutput_1);
						globalMap.put("tSugarCRMOutput_1_ID",
								id_tSugarCRMOutput_1);
						nb_line_tSugarCRMOutput_1++;
						// /////////////////////

						tos_count_tSugarCRMOutput_1++;

						/**
						 * [tSugarCRMOutput_1 main ] stop
						 */

					} // End of branch "SugarCRM_Contacts"

					/**
					 * [tFixedFlowInput_3 end ] start
					 */

					currentComponent = "tFixedFlowInput_3";

				}
				globalMap.put("tFixedFlowInput_3_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_3", true);
				end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_3 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSugarCRMOutput_1 end ] start
				 */

				currentComponent = "tSugarCRMOutput_1";

				sugarManagement_tSugarCRMOutput_1.logout();

				globalMap.put("tSugarCRMOutput_1_NB_LINE",
						nb_line_tSugarCRMOutput_1);

				ok_Hash.put("tSugarCRMOutput_1", true);
				end_Hash.put("tSugarCRMOutput_1", System.currentTimeMillis());

				tJava_10Process(globalMap);

				/**
				 * [tSugarCRMOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tSugarCRMOutput_1 finally ] start
				 */

				currentComponent = "tSugarCRMOutput_1";

				/**
				 * [tSugarCRMOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());

				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				HashMap<Object, Object> CustomerAddressHashMap2 = (HashMap<Object, Object>) context.CustomerAddressHashMap;
				// System.out.println("loop iteration ::"+((Integer)globalMap.get("tLoop_1_CURRENT_ITERATION")-1));

				if ((context.CustomerLength - 1) == ((Integer) globalMap
						.get("tLoop_1_CURRENT_ITERATION") - 1)) {

					CustomerAddressHashMap2.clear();
					// System.out.println("CustomerAddressHashMap cleared !!!");

				}

				/**
				 * [tJava_10 begin ] stop
				 */

				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */

				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				/**
				 * [tJava_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_10 finally ] start
				 */

				currentComponent = "tJava_10";

				/**
				 * [tJava_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());

				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				System.out.println("customer with Magento ID : "
						+ context.cus_id
						+ " Existing in SugarCRMCustomer Id ::"
						+ context.SugarCRMCustomerID);

				/**
				 * [tJava_13 begin ] stop
				 */

				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */

				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				/**
				 * [tJava_13 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_13 finally ] start
				 */

				currentComponent = "tJava_13";

				/**
				 * [tJava_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tJava_8Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				if (((Boolean) globalMap.get("tFileExist_1_EXISTS")) == true
						&& context.ValidateVariables == 0
						&& context.SMTPTest == 0 && context.ErrorCode != 1) {

					tJava_4Process(globalMap);
				}

				/**
				 * [tJava_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				// context.ErrorCode=input_row.code;
				context.setSubject = "Email from Magento2SugarCRM Talend Crons Status :OK "
						+ context.CustomerCount
						+ "/"
						+ context.SyncCustomersCount
						+ " Customers Synced "
						+ TalendDate.formatDate("dd/MM/yyyy hh.mm",
								TalendDate.getCurrentDate());

				context.EmailBody = "Hi,   "
						+ "<br><br>"
						+ "&nbsp;&nbsp;&nbsp;&nbsp;Job successfully performed.The following are the statistics"
						+ "<br><br>Total Customers at Magento : "
						+ context.CustomerCount
						+ "<br><br>Total Customers Successfully Synced to SugarCRM : "
						+ context.SyncCustomersCount
						+ "<br><br> Sync Performed Time :     "
						+ TalendDate.formatDate("yyyy-MM-dd hh:mm:ss",
								TalendDate.getCurrentDate());

				// System.out.println("Email body::"+context.EmailBody);
				System.out.println("Sync performed successfully !!!"
						+ "SugarCRM Customer sync count ::"
						+ context.SyncCustomersCount);

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				tSendMail_1Process(globalMap);

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_1 begin ] start
				 */

				ok_Hash.put("tSendMail_1", false);
				start_Hash.put("tSendMail_1", System.currentTimeMillis());

				currentComponent = "tSendMail_1";

				int tos_count_tSendMail_1 = 0;

				/**
				 * [tSendMail_1 begin ] stop
				 */

				/**
				 * [tSendMail_1 main ] start
				 */

				currentComponent = "tSendMail_1";

				String smtpHost_tSendMail_1 = context.emailSmtpHost;
				String smtpPort_tSendMail_1 = context.emailSmtpPort;
				String from_tSendMail_1 = (context.setFrom);
				String to_tSendMail_1 = (context.setTo).replace(";", ",");
				String cc_tSendMail_1 = ((context.setCc) == null || ""
						.equals(context.setCc)) ? null : (context.setCc)
						.replace(";", ",");
				String bcc_tSendMail_1 = ((context.setBcc) == null || ""
						.equals(context.setBcc)) ? null : (context.setBcc)
						.replace(";", ",");
				String subject_tSendMail_1 = (context.setSubject);

				java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

				String message_tSendMail_1 = ((context.EmailBody) == null || ""
						.equals(context.EmailBody)) ? "\"\""
						: (context.EmailBody);
				java.util.Properties props_tSendMail_1 = System.getProperties();
				props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
				props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
				props_tSendMail_1.put("mail.mime.encodefilename", "true");
				java.security.Security
						.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
				props_tSendMail_1.put("mail.smtp.socketFactory.class",
						"javax.net.ssl.SSLSocketFactory");
				props_tSendMail_1.put("mail.smtp.socketFactory.fallback",
						"false");
				props_tSendMail_1.put("mail.smtp.socketFactory.port",
						smtpPort_tSendMail_1);
				try {

					props_tSendMail_1.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_1 = javax.mail.Session
							.getInstance(props_tSendMail_1,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_1 = context.emailSmtpPassword;

											return new javax.mail.PasswordAuthentication(
													context.emailSmtpUsername,
													decryptedPassword_tSendMail_1);
										}
									});

					javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(
							session_tSendMail_1);
					msg_tSendMail_1
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_1, null));
					msg_tSendMail_1.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_1, false));
					if (cc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_1, false));
					if (bcc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_1, false));
					msg_tSendMail_1.setSubject(subject_tSendMail_1);

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1
							.size(); i_tSendMail_1++) {
						java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1
								.get(i_tSendMail_1);
						msg_tSendMail_1.setHeader(
								header_tSendMail_1.get("KEY"),
								header_tSendMail_1.get("VALUE"));
					}
					msg_tSendMail_1.setSentDate(new Date());
					msg_tSendMail_1.setHeader("X-Priority", "1"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_1.setText(message_tSendMail_1,
							"ISO-8859-15", "html");
					mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1
							.size(); i_tSendMail_1++) {
						String filename_tSendMail_1 = attachments_tSendMail_1
								.get(i_tSendMail_1);
						javax.activation.FileDataSource fds_tSendMail_1 = null;
						java.io.File file_tSendMail_1 = new java.io.File(
								filename_tSendMail_1);

						if (!file_tSendMail_1.exists()) {
							continue;
						}

						if (file_tSendMail_1.isDirectory()) {
							java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1
									.listFiles();
							for (java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1) {
								if (subFile_tSendMail_1.isFile()) {
									fds_tSendMail_1 = new javax.activation.FileDataSource(
											subFile_tSendMail_1
													.getAbsolutePath());
									mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_1
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_1));
									mbpFile_tSendMail_1
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_1
															.getName()));
									if (contentTransferEncoding_tSendMail_1
											.get(i_tSendMail_1)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_1.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_1
											.addBodyPart(mbpFile_tSendMail_1);
								}
							}
						} else {
							mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_1 = new javax.activation.FileDataSource(
									filename_tSendMail_1);
							mbpFile_tSendMail_1
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_1));
							mbpFile_tSendMail_1
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_1
													.getName()));
							if (contentTransferEncoding_tSendMail_1.get(
									i_tSendMail_1).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_1.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
						}
					}
					// -- set the content --
					msg_tSendMail_1.setContent(mp_tSendMail_1);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_1 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_1
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_1
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_1
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_1
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_1
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_1);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_1);
				} catch (java.lang.Exception e) {

					throw (e);

				} finally {
					props_tSendMail_1.remove("mail.smtp.host");
					props_tSendMail_1.remove("mail.smtp.port");

					props_tSendMail_1.remove("mail.mime.encodefilename");

					props_tSendMail_1.remove("mail.smtp.socketFactory.class");
					props_tSendMail_1
							.remove("mail.smtp.socketFactory.fallback");
					props_tSendMail_1.remove("mail.smtp.socketFactory.port");

					props_tSendMail_1.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_1++;

				/**
				 * [tSendMail_1 main ] stop
				 */

				/**
				 * [tSendMail_1 end ] start
				 */

				currentComponent = "tSendMail_1";

				ok_Hash.put("tSendMail_1", true);
				end_Hash.put("tSendMail_1", System.currentTimeMillis());

				/**
				 * [tSendMail_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_1 finally ] start
				 */

				currentComponent = "tSendMail_1";

				/**
				 * [tSendMail_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Magento2SugarCRMSync Magento2SugarCRMSyncClass = new Magento2SugarCRMSync();

		int exitCode = Magento2SugarCRMSyncClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Magento2SugarCRMSync.class
					.getClassLoader().getResourceAsStream(
							"magentosugarcrm/magento2sugarcrmsync_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.MagentoIDList = (Object) context
					.getProperty("MagentoIDList");
			context.magento_sessionId = (String) context
					.getProperty("magento_sessionId");
			try {
				context.CustomerLength = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("CustomerLength"));
			} catch (NumberFormatException e) {
				context.CustomerLength = null;
			}
			context.indexval = (Object) context.getProperty("indexval");
			context.cus_id = (String) context.getProperty("cus_id");
			try {
				String context_create_at_value = context
						.getProperty("create_at");
				if (context_create_at_value == null) {
					context_create_at_value = "";
				}
				int context_create_at_pos = context_create_at_value
						.indexOf(";");
				String context_create_at_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_create_at_pos > -1) {
					context_create_at_pattern = context_create_at_value
							.substring(0, context_create_at_pos);
					context_create_at_value = context_create_at_value
							.substring(context_create_at_pos + 1);
				}

				context.create_at = (java.util.Date) (new java.text.SimpleDateFormat(
						context_create_at_pattern)
						.parse(context_create_at_value));

			} catch (ParseException e) {
				context.create_at = null;
			}
			try {
				String context_update_at_value = context
						.getProperty("update_at");
				if (context_update_at_value == null) {
					context_update_at_value = "";
				}
				int context_update_at_pos = context_update_at_value
						.indexOf(";");
				String context_update_at_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_update_at_pos > -1) {
					context_update_at_pattern = context_update_at_value
							.substring(0, context_update_at_pos);
					context_update_at_value = context_update_at_value
							.substring(context_update_at_pos + 1);
				}

				context.update_at = (java.util.Date) (new java.text.SimpleDateFormat(
						context_update_at_pattern)
						.parse(context_update_at_value));

			} catch (ParseException e) {
				context.update_at = null;
			}
			context.email = (String) context.getProperty("email");
			context.firstname = (String) context.getProperty("firstname");
			context.lname = (String) context.getProperty("lname");
			context.city = (String) context.getProperty("city");
			context.telephone = (String) context.getProperty("telephone");
			context.street = (String) context.getProperty("street");
			context.postcode = (String) context.getProperty("postcode");
			context.salutation = (String) context.getProperty("salutation");
			context.MagentoURL = (String) context.getProperty("MagentoURL");
			context.MagentoAPIUser = (String) context
					.getProperty("MagentoAPIUser");
			context.MagentoAPIPassword = (String) context
					.getProperty("MagentoAPIPassword");
			context.SugarCRMURL = (String) context.getProperty("SugarCRMURL");
			try {
				context.MagentoConnectionTimeOut = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("MagentoConnectionTimeOut"));
			} catch (NumberFormatException e) {
				context.MagentoConnectionTimeOut = null;
			}
			context.SugarCRMUser = (String) context.getProperty("SugarCRMUser");
			context.SugarCRMPassword = (String) context
					.getProperty("SugarCRMPassword");
			context.PropertyFilePath = (String) context
					.getProperty("PropertyFilePath");
			try {
				context.ValidateVariables = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("ValidateVariables"));
			} catch (NumberFormatException e) {
				context.ValidateVariables = null;
			}
			try {
				context.MagentoReadTimeout = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("MagentoReadTimeout"));
			} catch (NumberFormatException e) {
				context.MagentoReadTimeout = null;
			}
			try {
				context.MagentoConnectionCode = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("MagentoConnectionCode"));
			} catch (NumberFormatException e) {
				context.MagentoConnectionCode = null;
			}
			try {
				context.CRMRecordsCount = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("CRMRecordsCount"));
			} catch (NumberFormatException e) {
				context.CRMRecordsCount = null;
			}
			context.SugarCRMID = (String) context.getProperty("SugarCRMID");
			context.CustomerAddressHashMap = (Object) context
					.getProperty("CustomerAddressHashMap");
			context.SugarCRMCustomerID = (String) context
					.getProperty("SugarCRMCustomerID");
			try {
				context.CustomerCount = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("CustomerCount"));
			} catch (NumberFormatException e) {
				context.CustomerCount = null;
			}
			context.MasterIDSList = (Object) context
					.getProperty("MasterIDSList");
			try {
				context.MasterListSize = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("MasterListSize"));
			} catch (NumberFormatException e) {
				context.MasterListSize = null;
			}
			context.MasterSubIDList = (Object) context
					.getProperty("MasterSubIDList");
			try {
				context.MagentoCustomerCount = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("MagentoCustomerCount"));
			} catch (NumberFormatException e) {
				context.MagentoCustomerCount = null;
			}
			context.EmailBody = (String) context.getProperty("EmailBody");
			context.emailSmtpPort = (String) context
					.getProperty("emailSmtpPort");
			context.emailSmtpHost = (String) context
					.getProperty("emailSmtpHost");
			context.emailSmtpUsername = (String) context
					.getProperty("emailSmtpUsername");
			context.emailSmtpPassword = (String) context
					.getProperty("emailSmtpPassword");
			context.setTo = (String) context.getProperty("setTo");
			context.setCc = (String) context.getProperty("setCc");
			context.setBcc = (String) context.getProperty("setBcc");
			context.setSubject = (String) context.getProperty("setSubject");
			try {
				context.SMTPTest = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("SMTPTest"));
			} catch (NumberFormatException e) {
				context.SMTPTest = null;
			}
			context.setFrom = (String) context.getProperty("setFrom");
			try {
				context.ErrorCode = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("ErrorCode"));
			} catch (NumberFormatException e) {
				context.ErrorCode = null;
			}
			try {
				context.SyncCustomersCount = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("SyncCustomersCount"));
			} catch (NumberFormatException e) {
				context.SyncCustomersCount = null;
			}
			try {
				context.SugarCRMIDCount = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("SugarCRMIDCount"));
			} catch (NumberFormatException e) {
				context.SugarCRMIDCount = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("MagentoIDList")) {
				context.MagentoIDList = (Object) parentContextMap
						.get("MagentoIDList");
			}
			if (parentContextMap.containsKey("magento_sessionId")) {
				context.magento_sessionId = (String) parentContextMap
						.get("magento_sessionId");
			}
			if (parentContextMap.containsKey("CustomerLength")) {
				context.CustomerLength = (Integer) parentContextMap
						.get("CustomerLength");
			}
			if (parentContextMap.containsKey("indexval")) {
				context.indexval = (Object) parentContextMap.get("indexval");
			}
			if (parentContextMap.containsKey("cus_id")) {
				context.cus_id = (String) parentContextMap.get("cus_id");
			}
			if (parentContextMap.containsKey("create_at")) {
				context.create_at = (java.util.Date) parentContextMap
						.get("create_at");
			}
			if (parentContextMap.containsKey("update_at")) {
				context.update_at = (java.util.Date) parentContextMap
						.get("update_at");
			}
			if (parentContextMap.containsKey("email")) {
				context.email = (String) parentContextMap.get("email");
			}
			if (parentContextMap.containsKey("firstname")) {
				context.firstname = (String) parentContextMap.get("firstname");
			}
			if (parentContextMap.containsKey("lname")) {
				context.lname = (String) parentContextMap.get("lname");
			}
			if (parentContextMap.containsKey("city")) {
				context.city = (String) parentContextMap.get("city");
			}
			if (parentContextMap.containsKey("telephone")) {
				context.telephone = (String) parentContextMap.get("telephone");
			}
			if (parentContextMap.containsKey("street")) {
				context.street = (String) parentContextMap.get("street");
			}
			if (parentContextMap.containsKey("postcode")) {
				context.postcode = (String) parentContextMap.get("postcode");
			}
			if (parentContextMap.containsKey("salutation")) {
				context.salutation = (String) parentContextMap
						.get("salutation");
			}
			if (parentContextMap.containsKey("MagentoURL")) {
				context.MagentoURL = (String) parentContextMap
						.get("MagentoURL");
			}
			if (parentContextMap.containsKey("MagentoAPIUser")) {
				context.MagentoAPIUser = (String) parentContextMap
						.get("MagentoAPIUser");
			}
			if (parentContextMap.containsKey("MagentoAPIPassword")) {
				context.MagentoAPIPassword = (String) parentContextMap
						.get("MagentoAPIPassword");
			}
			if (parentContextMap.containsKey("SugarCRMURL")) {
				context.SugarCRMURL = (String) parentContextMap
						.get("SugarCRMURL");
			}
			if (parentContextMap.containsKey("MagentoConnectionTimeOut")) {
				context.MagentoConnectionTimeOut = (Integer) parentContextMap
						.get("MagentoConnectionTimeOut");
			}
			if (parentContextMap.containsKey("SugarCRMUser")) {
				context.SugarCRMUser = (String) parentContextMap
						.get("SugarCRMUser");
			}
			if (parentContextMap.containsKey("SugarCRMPassword")) {
				context.SugarCRMPassword = (String) parentContextMap
						.get("SugarCRMPassword");
			}
			if (parentContextMap.containsKey("PropertyFilePath")) {
				context.PropertyFilePath = (String) parentContextMap
						.get("PropertyFilePath");
			}
			if (parentContextMap.containsKey("ValidateVariables")) {
				context.ValidateVariables = (Integer) parentContextMap
						.get("ValidateVariables");
			}
			if (parentContextMap.containsKey("MagentoReadTimeout")) {
				context.MagentoReadTimeout = (Integer) parentContextMap
						.get("MagentoReadTimeout");
			}
			if (parentContextMap.containsKey("MagentoConnectionCode")) {
				context.MagentoConnectionCode = (Integer) parentContextMap
						.get("MagentoConnectionCode");
			}
			if (parentContextMap.containsKey("CRMRecordsCount")) {
				context.CRMRecordsCount = (Integer) parentContextMap
						.get("CRMRecordsCount");
			}
			if (parentContextMap.containsKey("SugarCRMID")) {
				context.SugarCRMID = (String) parentContextMap
						.get("SugarCRMID");
			}
			if (parentContextMap.containsKey("CustomerAddressHashMap")) {
				context.CustomerAddressHashMap = (Object) parentContextMap
						.get("CustomerAddressHashMap");
			}
			if (parentContextMap.containsKey("SugarCRMCustomerID")) {
				context.SugarCRMCustomerID = (String) parentContextMap
						.get("SugarCRMCustomerID");
			}
			if (parentContextMap.containsKey("CustomerCount")) {
				context.CustomerCount = (Integer) parentContextMap
						.get("CustomerCount");
			}
			if (parentContextMap.containsKey("MasterIDSList")) {
				context.MasterIDSList = (Object) parentContextMap
						.get("MasterIDSList");
			}
			if (parentContextMap.containsKey("MasterListSize")) {
				context.MasterListSize = (Integer) parentContextMap
						.get("MasterListSize");
			}
			if (parentContextMap.containsKey("MasterSubIDList")) {
				context.MasterSubIDList = (Object) parentContextMap
						.get("MasterSubIDList");
			}
			if (parentContextMap.containsKey("MagentoCustomerCount")) {
				context.MagentoCustomerCount = (Integer) parentContextMap
						.get("MagentoCustomerCount");
			}
			if (parentContextMap.containsKey("EmailBody")) {
				context.EmailBody = (String) parentContextMap.get("EmailBody");
			}
			if (parentContextMap.containsKey("emailSmtpPort")) {
				context.emailSmtpPort = (String) parentContextMap
						.get("emailSmtpPort");
			}
			if (parentContextMap.containsKey("emailSmtpHost")) {
				context.emailSmtpHost = (String) parentContextMap
						.get("emailSmtpHost");
			}
			if (parentContextMap.containsKey("emailSmtpUsername")) {
				context.emailSmtpUsername = (String) parentContextMap
						.get("emailSmtpUsername");
			}
			if (parentContextMap.containsKey("emailSmtpPassword")) {
				context.emailSmtpPassword = (String) parentContextMap
						.get("emailSmtpPassword");
			}
			if (parentContextMap.containsKey("setTo")) {
				context.setTo = (String) parentContextMap.get("setTo");
			}
			if (parentContextMap.containsKey("setCc")) {
				context.setCc = (String) parentContextMap.get("setCc");
			}
			if (parentContextMap.containsKey("setBcc")) {
				context.setBcc = (String) parentContextMap.get("setBcc");
			}
			if (parentContextMap.containsKey("setSubject")) {
				context.setSubject = (String) parentContextMap
						.get("setSubject");
			}
			if (parentContextMap.containsKey("SMTPTest")) {
				context.SMTPTest = (Integer) parentContextMap.get("SMTPTest");
			}
			if (parentContextMap.containsKey("setFrom")) {
				context.setFrom = (String) parentContextMap.get("setFrom");
			}
			if (parentContextMap.containsKey("ErrorCode")) {
				context.ErrorCode = (Integer) parentContextMap.get("ErrorCode");
			}
			if (parentContextMap.containsKey("SyncCustomersCount")) {
				context.SyncCustomersCount = (Integer) parentContextMap
						.get("SyncCustomersCount");
			}
			if (parentContextMap.containsKey("SugarCRMIDCount")) {
				context.SugarCRMIDCount = (Integer) parentContextMap
						.get("SugarCRMIDCount");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_5) {
			globalMap.put("tJava_5_SUBPROCESS_STATE", -1);

			e_tJava_5.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Magento2SugarCRMSync");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 205630 characters generated by Talend Open Studio for ESB on the 9 May, 2016
 * 1:28:51 PM IST
 ************************************************************************************************/
